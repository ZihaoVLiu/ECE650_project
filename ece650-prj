// Created by Zihao Liu on 2019-11-22.
//
#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <set>
using namespace std;

// build a array to store edge elements.
int edgeList[10000];
int iarray[5000];
int jarray[5000];
vector<int> ivector; // vector to store the first value of each vertex.
vector<int> jvector; // vector to store the second value of each vertex.
vector<int> indexvector; // vector to store the index number of duplicate vertex coordinate.
vector<int> CVresult;
int EleLength;// the number of edge end and start points.
int VNumber; //the number of vertexs.
int ENumber; //the number of edges.
int startendList[2];

// function to get the input string.
string getString(){
    string gather;
    getline(cin, gather);
    return gather;
}

// function to append edge elements into the edgeList.
void getEdgeArr(string s){
    int result = 0;
    int index = 0;
    for (int i = 0; i < s.size(); ++i)
    {
        if (s[i] == ' ' || s[i] == '<') {
            continue;
        }
        if (s[i] >= '0'&&s[i] <= '9'){
            result= result * 10 + s[i] - 48;
        }
        if ((s[i] == ',' && s[i+1] >= '0'&&s[i+1] <= '9') || s[i] == '>'){
            edgeList[index] = result;
            result = 0;
            index += 1;
        }
    }
    EleLength = index;
    ENumber = index/2;
}

// function to get the number of vertex. Using after input command V.
void getVNumber(string s){
    int result = 0;
    for (int i = 0; i < s.size(); ++i)
    {
        if (s[i] == ' ' || s[i] == '<') {
            continue;
        }
        if (s[i] >= '0'&&s[i] <= '9'){
            result= result * 10 + s[i] - 48;
        }
    }
    VNumber = result;
}

// append i, j (start and end point of edges) into array.
void twoArray(){
    int valuei = 0;
    int valuej = 1;
    for (int i = 0; i < EleLength/2; ++i) {
        iarray[i] = edgeList[valuei];
        valuei += 2;
    }
    for (int j = 0; j < EleLength/2; ++j) {
        jarray[j] = edgeList[valuej];
        valuej += 2;
    }
}

// If input edge nodes exceeds the vertex number, an error will be output.
int eInVertex(){
    int temp = 1;
    for (int i = 0; i < EleLength; ++i) {
        if (edgeList[i] >= VNumber) {
            cerr << "Error: Input edge node does not exist." << endl;
            temp = 0;
            break;
        }
    }
    return temp;
}

// function to get the input value index number of input verctor.
int getIndex(int value, vector<int> vector){
    for (int i = 0; i < vector.size(); ++i) {
        if (value == vector[i])
            indexvector.push_back(i);
    }
    return 0;
}
int vectorDelete(){
    // define the smallest function to get the min value.
    vector<int>::iterator ismallest = max_element(begin(ivector), end(ivector));
    vector<int>::iterator jsmallest = max_element(begin(jvector), end(jvector));
    for (int n = 0; n < ENumber; ++n){
        ivector.push_back(iarray[n]);
        jvector.push_back(jarray[n]);
    }
    int ivalue, jvalue;
    for (int m = 0; m < ENumber; ++m) {
        if (iarray[m] < 99999) {
            ivalue = iarray[m];
            jvalue = iarray[m];
            getIndex(ivalue, ivector);
            getIndex(jvalue, jvector);
            getIndex(ivalue, jvector);
            getIndex(jvalue, ivector);
            // use the indexvector to set the indicated value to a huge number.
            for (int i = 0; i < indexvector.size(); ++i) {
                //cout << indexvector[i] << " ";
                ivector[indexvector[i]] = 99999;
                jvector[indexvector[i]] = 99999;
                /*
                cout << "********* ivector ******" << endl;
                for (int j = 0; j < ENumber; ++j) {
                    cout << ivector[j] << " ";
                }
                cout << endl;
                 */
            }
            // store the vertex value into the cover vertex result vector.
            CVresult.push_back(ivalue);
            CVresult.push_back(jvalue);
            // clear the indexvector.
            indexvector.clear();
            //cout << endl;
        }
    }
    for (int j = 0; j < CVresult.size(); ++j) {
        cout << CVresult[j] << " ";
    }
    cout << endl;
}

int main() {
    for (;;)
    {
        string gather = getString();
        int judge;
        char firstChar = gather[0];
        /*
        if (firstChar != 'V' && firstChar != 'E'){
            cerr << "Error: The input is invalid." << endl;
            continue;
        }
         */
        if (firstChar == 'V'){
            getVNumber(gather);
            continue;
        }
        if (firstChar == 'E'){
            getEdgeArr(gather);
            if (eInVertex() == 0){
                judge = 1;
                continue;
            }
            judge = 0;
            twoArray();
            vectorDelete();
            continue;
        }

        return 0;
    }
}
